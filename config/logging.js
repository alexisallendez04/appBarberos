// Sistema de configuraci√≥n de logs
const LOG_LEVELS = {
    ERROR: 0,    // Solo errores cr√≠ticos
    WARN: 1,     // Advertencias y errores
    INFO: 2,     // Informaci√≥n b√°sica
    DEBUG: 3,    // Informaci√≥n detallada para desarrollo
    VERBOSE: 4   // Todo tipo de informaci√≥n
};

// Configuraci√≥n por defecto
const DEFAULT_CONFIG = {
    level: process.env.NODE_ENV === 'production' ? LOG_LEVELS.WARN : LOG_LEVELS.INFO,
    showEmojis: process.env.NODE_ENV !== 'production',
    showTimestamps: process.env.NODE_ENV === 'production',
    showDebugInfo: process.env.NODE_ENV === 'development'
};

class Logger {
    constructor(config = {}) {
        this.config = { ...DEFAULT_CONFIG, ...config };
        this.level = this.config.level;
    }

    // Funci√≥n para verificar si un nivel debe mostrarse
    shouldLog(level) {
        return level <= this.level;
    }

    // Funci√≥n para formatear timestamp
    formatTimestamp() {
        if (!this.config.showTimestamps) return '';
        return `[${new Date().toISOString()}] `;
    }

    // Funci√≥n para formatear emoji
    formatEmoji(emoji) {
        if (!this.config.showEmojis) return '';
        return emoji + ' ';
    }

    // Log de error (siempre visible)
    error(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.ERROR)) {
            console.error(this.formatTimestamp() + this.formatEmoji('‚ùå') + message, ...args);
        }
    }

    // Log de advertencia
    warn(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.WARN)) {
            console.warn(this.formatTimestamp() + this.formatEmoji('‚ö†Ô∏è') + message, ...args);
        }
    }

    // Log de informaci√≥n
    info(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.INFO)) {
            console.log(this.formatTimestamp() + this.formatEmoji('‚ÑπÔ∏è') + message, ...args);
        }
    }

    // Log de debug
    debug(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.DEBUG)) {
            console.log(this.formatTimestamp() + this.formatEmoji('üîç') + message, ...args);
        }
    }

    // Log de estad√≠sticas (solo en desarrollo)
    stats(message, ...args) {
        if (this.config.showDebugInfo && this.shouldLog(LOG_LEVELS.DEBUG)) {
            console.log(this.formatTimestamp() + this.formatEmoji('üìä') + message, ...args);
        }
    }

    // Log de √©xito
    success(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.INFO)) {
            console.log(this.formatTimestamp() + this.formatEmoji('‚úÖ') + message, ...args);
        }
    }

    // Log de inicio
    start(message, ...args) {
        if (this.shouldLog(LOG_LEVELS.INFO)) {
            console.log(this.formatTimestamp() + this.formatEmoji('üöÄ') + message, ...args);
        }
    }

    // Log de base de datos
    db(message, ...args) {
        if (this.config.showDebugInfo && this.shouldLog(LOG_LEVELS.DEBUG)) {
            console.log(this.formatTimestamp() + this.formatEmoji('üóÑÔ∏è') + message, ...args);
        }
    }

    // Log de API
    api(message, ...args) {
        if (this.config.showDebugInfo && this.shouldLog(LOG_LEVELS.DEBUG)) {
            console.log(this.formatTimestamp() + this.formatEmoji('üåê') + message, ...args);
        }
    }

    // Funci√≥n para cambiar el nivel de log din√°micamente
    setLevel(level) {
        this.level = level;
        this.info(`Nivel de log cambiado a: ${this.getLevelName(level)}`);
    }

    // Funci√≥n para obtener el nombre del nivel
    getLevelName(level) {
        const names = ['ERROR', 'WARN', 'INFO', 'DEBUG', 'VERBOSE'];
        return names[level] || 'UNKNOWN';
    }

    // Funci√≥n para mostrar configuraci√≥n actual
    showConfig() {
        this.info('Configuraci√≥n de logs:');
        this.info(`  Nivel: ${this.getLevelName(this.level)}`);
        this.info(`  Emojis: ${this.config.showEmojis ? 'Activados' : 'Desactivados'}`);
        this.info(`  Timestamps: ${this.config.showTimestamps ? 'Activados' : 'Desactivados'}`);
        this.info(`  Debug: ${this.config.showDebugInfo ? 'Activado' : 'Desactivado'}`);
    }
}

// Crear instancia global del logger
const logger = new Logger();

// Funci√≥n para configurar el logger desde variables de entorno
function configureLogger() {
    const envLevel = process.env.LOG_LEVEL;
    if (envLevel) {
        const level = parseInt(envLevel);
        if (!isNaN(level) && level >= 0 && level <= 4) {
            logger.setLevel(level);
        }
    }

    // Mostrar configuraci√≥n al inicio
    logger.showConfig();
}

// Exportar logger y funci√≥n de configuraci√≥n
module.exports = {
    logger,
    configureLogger,
    LOG_LEVELS
};
