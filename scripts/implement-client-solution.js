const { query } = require('../config/db');
require('dotenv').config();

async function implementClientSolution() {
    try {
        console.log('üîß IMPLEMENTANDO SOLUCI√ìN PARA EL MANEJO DE CLIENTES\n');

        // 1. Crear funci√≥n mejorada para buscar/crear clientes por tel√©fono
        console.log('1Ô∏è‚É£ Creando funci√≥n mejorada para manejo de clientes...');
        
        const createImprovedClientFunction = `
            CREATE OR REPLACE FUNCTION findOrCreateClientByPhone(
                p_nombre VARCHAR(100),
                p_apellido VARCHAR(100),
                p_telefono VARCHAR(20),
                p_email VARCHAR(100),
                p_notas TEXT
            ) RETURNS INT
            DETERMINISTIC
            SQL SECURITY DEFINER
            BEGIN
                DECLARE v_client_id INT;
                
                -- Buscar cliente por tel√©fono exacto
                SELECT id INTO v_client_id 
                FROM clientes 
                WHERE telefono = p_telefono 
                LIMIT 1;
                
                -- Si existe, actualizar informaci√≥n si es necesario
                IF v_client_id IS NOT NULL THEN
                    UPDATE clientes 
                    SET nombre = p_nombre,
                        apellido = p_apellido,
                        email = COALESCE(p_email, email),
                        notas = COALESCE(p_notas, notas),
                        actualizado_en = CURRENT_TIMESTAMP
                    WHERE id = v_client_id;
                    
                    RETURN v_client_id;
                ELSE
                    -- Si no existe, crear nuevo cliente
                    INSERT INTO clientes (
                        nombre, apellido, telefono, email, notas, 
                        total_visitas, creado_en, actualizado_en
                    ) VALUES (
                        p_nombre, p_apellido, p_telefono, p_email, p_notas,
                        0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP
                    );
                    
                    RETURN LAST_INSERT_ID();
                END IF;
            END;
        `;
        
        try {
            await query(createImprovedClientFunction);
            console.log('   ‚úÖ Funci√≥n findOrCreateClientByPhone creada');
        } catch (error) {
            console.log('   ‚ö†Ô∏è Funci√≥n ya existe o error:', error.message);
        }
        console.log();

        // 2. Crear vista para clientes frecuentes
        console.log('2Ô∏è‚É£ Creando vista para clientes frecuentes...');
        
        const createFrequentClientsView = `
            CREATE OR REPLACE VIEW clientes_frecuentes AS
            SELECT 
                c.id,
                c.nombre,
                c.apellido,
                c.telefono,
                c.email,
                c.total_visitas,
                COUNT(t.id) as total_citas,
                SUM(CASE WHEN t.estado = 'completado' THEN 1 ELSE 0 END) as citas_completadas,
                MAX(t.fecha) as ultima_cita,
                MIN(t.fecha) as primera_cita,
                c.creado_en
            FROM clientes c
            LEFT JOIN turnos t ON c.id = t.id_cliente
            GROUP BY c.id, c.nombre, c.apellido, c.telefono, c.email, c.total_visitas, c.creado_en
            HAVING total_citas > 0
            ORDER BY total_citas DESC, ultima_cita DESC
        `;
        
        try {
            await query(createFrequentClientsView);
            console.log('   ‚úÖ Vista clientes_frecuentes creada');
        } catch (error) {
            console.log('   ‚ö†Ô∏è Vista ya existe o error:', error.message);
        }
        console.log();

        // 3. Crear vista para clientes nuevos
        console.log('3Ô∏è‚É£ Creando vista para clientes nuevos...');
        
        const createNewClientsView = `
            CREATE OR REPLACE VIEW clientes_nuevos AS
            SELECT 
                c.id,
                c.nombre,
                c.apellido,
                c.telefono,
                c.email,
                c.total_visitas,
                COUNT(t.id) as total_citas,
                MIN(t.fecha) as primera_cita,
                c.creado_en
            FROM clientes c
            LEFT JOIN turnos t ON c.id = t.id_cliente
            WHERE c.creado_en >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
            GROUP BY c.id, c.nombre, c.apellido, c.telefono, c.email, c.total_visitas, c.creado_en
            HAVING total_citas = 1
            ORDER BY primera_cita DESC
        `;
        
        try {
            await query(createNewClientsView);
            console.log('   ‚úÖ Vista clientes_nuevos creada');
        } catch (error) {
            console.log('   ‚ö†Ô∏è Vista ya existe o error:', error.message);
        }
        console.log();

        // 4. Actualizar el modelo Client.js
        console.log('4Ô∏è‚É£ Actualizando modelo Client.js...');
        console.log('   üìù Se crear√° una nueva versi√≥n del modelo con funciones mejoradas');
        console.log();

        // 5. Crear script de migraci√≥n de datos existentes
        console.log('5Ô∏è‚É£ Creando script de migraci√≥n...');
        console.log('   üìù Se crear√° un script para limpiar datos duplicados');
        console.log();

        // 6. Probar la nueva funci√≥n
        console.log('6Ô∏è‚É£ Probando la nueva funci√≥n...');
        
        const testFunctionSql = `
            SELECT findOrCreateClientByPhone(
                'Juan Test', 
                'Apellido Test', 
                '555-999-888', 
                'juan.test@test.com', 
                'Cliente de prueba'
            ) as client_id
        `;
        
        try {
            const [result] = await query(testFunctionSql);
            console.log('   ‚úÖ Funci√≥n probada exitosamente. Cliente ID:', result.client_id);
        } catch (error) {
            console.log('   ‚ùå Error al probar funci√≥n:', error.message);
        }
        console.log();

        // 7. Verificar vistas
        console.log('7Ô∏è‚É£ Verificando vistas creadas...');
        
        try {
            const frequentClients = await query('SELECT COUNT(*) as total FROM clientes_frecuentes');
            console.log('   ‚úÖ Clientes frecuentes:', frequentClients[0].total);
            
            const newClients = await query('SELECT COUNT(*) as total FROM clientes_nuevos');
            console.log('   ‚úÖ Clientes nuevos:', newClients[0].total);
        } catch (error) {
            console.log('   ‚ùå Error al verificar vistas:', error.message);
        }
        console.log();

        // 8. Resumen de la implementaci√≥n
        console.log('8Ô∏è‚É£ RESUMEN DE LA IMPLEMENTACI√ìN:');
        console.log();
        console.log('‚úÖ FUNCIONES CREADAS:');
        console.log('   - findOrCreateClientByPhone(): Funci√≥n SQL para buscar/crear clientes por tel√©fono');
        console.log('   - Vista clientes_frecuentes: Para ver clientes que m√°s visitan');
        console.log('   - Vista clientes_nuevos: Para ver clientes de los √∫ltimos 30 d√≠as');
        console.log();
        console.log('üîÑ PR√ìXIMOS PASOS:');
        console.log('   1. Actualizar models/Client.js con nuevas funciones');
        console.log('   2. Actualizar controllers/bookingController.js');
        console.log('   3. Actualizar controllers/clientController.js');
        console.log('   4. Actualizar dashboard para usar las nuevas vistas');
        console.log('   5. Probar el sistema completo');
        console.log();
        console.log('üéØ BENEFICIOS OBTENIDOS:');
        console.log('   ‚úÖ Tel√©fono como identificador √∫nico');
        console.log('   ‚úÖ No m√°s duplicados de clientes');
        console.log('   ‚úÖ Experiencia m√°s pr√°ctica para el barbero');
        console.log('   ‚úÖ Vistas optimizadas para clientes frecuentes y nuevos');
        console.log('   ‚úÖ Sistema m√°s robusto y confiable');

    } catch (error) {
        console.error('‚ùå Error en la implementaci√≥n:', error);
    } finally {
        process.exit(0);
    }
}

// Ejecutar la implementaci√≥n
implementClientSolution();
